---
interface WrappedNumber {
    Int64: number;
    Valid: boolean;
}
interface Photo {
    ID: number;
    Basename: string;
    Year: WrappedNumber | null;
    Month: WrappedNumber | null;
    Day: WrappedNumber | null;
    Width: number;
    Height: number;
    AvailableSizes: string;
}
interface Props {
    photos: Photo[];
    baseURL: string;
}
const { photos, baseURL } = Astro.props;

function parseSizes(raw: string): string[] {
    try {
        const arr = JSON.parse(raw || "[]");
        return Array.isArray(arr) && arr.length
            ? arr
            : ["480w", "960w", "1600w", "2560w"];
    } catch {
        return ["480w", "960w", "1600w", "2560w"];
    }
}

function formatDate(p: Photo): string {
    const y = p.Year?.Valid ? p.Year.Int64 : null;
    const m = p.Month?.Valid ? p.Month.Int64 : null;
    const d = p.Day?.Valid ? p.Day.Int64 : null;
    if (!y) return "Date unknown";
    if (y && m && d)
        return new Date(y, m - 1, d).toLocaleDateString("en-US", {
            year: "numeric",
            month: "long",
            day: "numeric",
        });
    if (y && m)
        return new Date(y, m - 1).toLocaleDateString("en-US", {
            year: "numeric",
            month: "long",
        });
    return String(y);
}
---

<div
    id="lightbox"
    class="fixed inset-0 z-50 hidden"
    onclick="window.closeLightbox(event)"
>
    <div class="absolute inset-0 bg-black/90"></div>

    <!-- Controls -->
    <button
        aria-label="Close"
        onclick="window.closeLightbox()"
        class="absolute top-4 right-4 text-white text-3xl font-light hover:text-zinc-300"
        >×</button
    >
    <button
        aria-label="Previous"
        onclick="window.navigateLightbox(-1)"
        class="absolute left-4 top-1/2 -translate-y-1/2 text-white text-4xl font-light hover:text-zinc-300 select-none"
        >‹</button
    >
    <button
        aria-label="Next"
        onclick="window.navigateLightbox(1)"
        class="absolute right-4 top-1/2 -translate-y-1/2 text-white text-4xl font-light hover:text-zinc-300 select-none"
        >›</button
    >

    <!-- Image Stage (fills viewport) -->
    <div
        class="relative z-10 flex items-center justify-center w-full h-full p-4 select-none"
    >
        <div
            id="lb-stage"
            class="relative w-full h-full flex items-center justify-center"
        >
            <!-- Instant bitmap exactly from gallery -->
            <img
                id="lb-instant"
                class="absolute inset-0 w-full h-full object-contain select-none"
                alt=""
                decoding="async"
                draggable="false"
            />
            <!-- Upgrade layer -->
            <picture
                id="lb-upgrade"
                class="absolute inset-0 w-full h-full opacity-0 transition-opacity duration-300"
            >
                <source id="lb-upgrade-webp" type="image/webp" />
                <source id="lb-upgrade-jpg" type="image/jpeg" />
                <img
                    id="lb-upgrade-img"
                    class="w-full h-full object-contain select-none"
                    alt=""
                    decoding="async"
                    draggable="false"
                />
            </picture>
        </div>
        <div
            class="absolute bottom-4 right-4 bg-black/60 rounded-md px-3 py-2 pointer-events-none"
        >
            <span id="lightbox-date" class="text-white text-sm font-medium"
            ></span>
        </div>
    </div>
</div>

<script define:vars={{ photos, baseURL }}>
    let currentIndex = 0;
    const photoList = photos;
    let upgradeToken = 0; // invalidates in-flight upgrades when navigating

    // Client-side date formatting function
    function formatDate(photo) {
        const y = photo.Year?.Valid ? photo.Year.Int64 : null;
        const m = photo.Month?.Valid ? photo.Month.Int64 : null;
        const d = photo.Day?.Valid ? photo.Day.Int64 : null;
        if (!y) return "Date unknown";
        if (y && m && d)
            return new Date(y, m - 1, d).toLocaleDateString("en-US", {
                year: "numeric",
                month: "long",
                day: "numeric",
            });
        if (y && m)
            return new Date(y, m - 1).toLocaleDateString("en-US", {
                year: "numeric",
                month: "long",
            });
        return String(y);
    }

    function openLightbox(index) {
        currentIndex = index;
        updateDate();

        const lightbox = document.getElementById("lightbox");
        if (lightbox) {
            lightbox.classList.remove("hidden");
            // Use flex only after first frame to avoid layout thrash
            lightbox.classList.add("flex");
        }
        document.body.style.overflow = "hidden";
        document.addEventListener("keydown", handleKeydown);

        showInstantImage();
        scheduleUpgrade();
    }

    function closeLightbox(event) {
        if (
            event &&
            event.target !== event.currentTarget &&
            event.target instanceof HTMLElement
        ) {
            if (
                event.target.id !== "lb-img" &&
                event.target.getAttribute("aria-label") !== "Close"
            ) {
                return;
            }
        }
        const lightbox = document.getElementById("lightbox");
        if (lightbox) {
            lightbox.classList.add("hidden");
            lightbox.classList.remove("flex");
        }
        document.body.style.overflow = "";
        document.removeEventListener("keydown", handleKeydown);
    }

    function navigateLightbox(direction) {
        currentIndex += direction;
        if (currentIndex < 0) currentIndex = photoList.length - 1;
        else if (currentIndex >= photoList.length) currentIndex = 0;
        updateDate();
        cancelUpgrade();
        showInstantImage();
        scheduleUpgrade();
    }

    function handleKeydown(e) {
        if (e.key === "Escape") closeLightbox();
        if (e.key === "ArrowLeft") navigateLightbox(-1);
        if (e.key === "ArrowRight") navigateLightbox(1);
    }

    function updateDate() {
        const photo = photoList[currentIndex];
        const dateEl = document.getElementById("lightbox-date");
        if (dateEl) {
            dateEl.textContent = formatDate(photo);
        }
    }

    function showInstantImage() {
        const photo = photoList[currentIndex];
        const instant = document.getElementById("lb-instant");
        const upgradePicture = document.getElementById("lb-upgrade");
        if (!(instant && upgradePicture)) return;

        const galleryImg = document.getElementById(
            `gallery-img-${currentIndex}`,
        );
        let gallerySrc = null;
        if (galleryImg instanceof HTMLImageElement) {
            // Use currentSrc when available to respect srcset selection
            gallerySrc = galleryImg.currentSrc || galleryImg.src || null;
        }
        const fallback = `${baseURL}${photo.Basename}_lqip.jpg`;
        // Attach a single error handler to avoid broken icon state
        if (!instant.dataset.errorHandlerAttached) {
            instant.addEventListener(
                "error",
                () => {
                    // Fallback chain: lqip -> smallest size jpg
                    const base = `${baseURL}${photo.Basename}`;
                    const lqip = `${base}_lqip.jpg`;
                    if (instant.src !== lqip) {
                        instant.src = lqip;
                        return;
                    }
                    // Try smallest known size if lqip missing
                    try {
                        const sizes = JSON.parse(photo.AvailableSizes || "[]");
                        if (Array.isArray(sizes) && sizes.length) {
                            const smallest = sizes[0];
                            const candidate = `${base}_${smallest}.jpg`;
                            if (instant.src !== candidate)
                                instant.src = candidate;
                        }
                    } catch {}
                },
                { passive: true },
            );
            instant.dataset.errorHandlerAttached = "true";
        }

        instant.src = gallerySrc || fallback; // set after handler
        instant.alt = `Photo ${photo.Basename}`;
        // Remove width/height attributes to allow CSS upscaling beyond intrinsic
        instant.removeAttribute("width");
        instant.removeAttribute("height");
        // Reset visibility in case previous upgrade hid it
        instant.style.visibility = "visible";

        // Reset upgrade layer
        upgradePicture.classList.add("opacity-0");
        const upImg = document.getElementById("lb-upgrade-img");
        if (upImg) {
            // Hide upgrade image to prevent broken placeholder icon
            upImg.style.display = "none";
            upImg.removeAttribute("src");
            upImg.alt = "";
        }
        const upW = document.getElementById("lb-upgrade-webp");
        const upJ = document.getElementById("lb-upgrade-jpg");
        if (upW) upW.removeAttribute("srcset");
        if (upJ) upJ.removeAttribute("srcset");
    }

    function scheduleUpgrade() {
        const localToken = ++upgradeToken;
        // Two RAFs to guarantee first paint happened with instant image
        requestAnimationFrame(() => {
            requestAnimationFrame(() => {
                if (localToken !== upgradeToken) return; // navigation happened
                startHighResUpgrade(localToken);
            });
        });
    }

    function cancelUpgrade() {
        upgradeToken++; // invalidate
    }

    function startHighResUpgrade(token) {
        const photo = photoList[currentIndex];
        if (!photo) return;
        let sizes;
        try {
            sizes = JSON.parse(photo.AvailableSizes || "[]");
            if (!Array.isArray(sizes) || !sizes.length)
                sizes = ["480w", "960w", "1600w", "2560w"];
        } catch {
            sizes = ["480w", "960w", "1600w", "2560w"];
        }
        const numericSizes = sizes
            .map((s) => parseInt(s.replace(/[^0-9]/g, "")))
            .filter((n) => !isNaN(n));
        const viewport =
            Math.max(window.innerWidth, window.innerHeight) *
            (window.devicePixelRatio || 1);
        let picked = numericSizes[0];
        for (const n of numericSizes) {
            if (n >= viewport) {
                picked = n;
                break;
            }
            picked = n;
        }
        const pickedLabel =
            sizes.find((s) => s.startsWith(String(picked))) ||
            sizes[sizes.length - 1];

        const webpCandidate = `${baseURL}${photo.Basename}_${pickedLabel}.webp`;
        const jpgCandidate = `${baseURL}${photo.Basename}_${pickedLabel}.jpg`;

        const preloader = new Image();
        preloader.onload = () => {
            if (token !== upgradeToken) return; // stale
            applyUpgrade(
                photo,
                sizes,
                preloader.src.endsWith(".webp") ? preloader.src : undefined,
                preloader.src.endsWith(".webp") ? undefined : preloader.src,
            );
        };
        preloader.onerror = () => {
            const jpgLoader = new Image();
            jpgLoader.onload = () => {
                if (token !== upgradeToken) return;
                applyUpgrade(photo, sizes, undefined, jpgLoader.src);
            };
            jpgLoader.src = jpgCandidate;
        };
        preloader.src = webpCandidate; // try webp first
    }

    function applyUpgrade(photo, sizes, loadedWebp, loadedJpg) {
        const upgradePicture = document.getElementById("lb-upgrade");
        const upWebp = document.getElementById("lb-upgrade-webp");
        const upJpg = document.getElementById("lb-upgrade-jpg");
        const upImg = document.getElementById("lb-upgrade-img");
        if (!(upgradePicture && upWebp && upJpg && upImg)) return;

        const webpSrcset = sizes
            .map((s) => `${baseURL}${photo.Basename}_${s}.webp ${s}`)
            .join(", ");
        const jpgSrcset = sizes
            .map((s) => `${baseURL}${photo.Basename}_${s}.jpg ${s}`)
            .join(", ");
        upWebp.setAttribute("srcset", webpSrcset);
        upWebp.setAttribute("sizes", "100vw");
        upJpg.setAttribute("srcset", jpgSrcset);
        upJpg.setAttribute("sizes", "100vw");
        upImg.alt = `Photo ${photo.Basename}`;
        upImg.removeAttribute("width");
        upImg.removeAttribute("height");
        upImg.src =
            loadedWebp ||
            loadedJpg ||
            `${baseURL}${photo.Basename}_${sizes[sizes.length - 1]}.jpg`;

        // Make sure it's visible only once src is valid
        upImg.style.display = "block";

        // Force a reflow before changing opacity to ensure transition
        void upgradePicture.offsetWidth;
        upgradePicture.classList.remove("opacity-0");
        upgradePicture.classList.add("opacity-100");

        const instant = document.getElementById("lb-instant");
        if (instant) {
            // After transition completes, conceal instant layer (keep for quick re-open caching)
            setTimeout(() => {
                if (
                    instant &&
                    upgradePicture.classList.contains("opacity-100")
                ) {
                    instant.style.visibility = "hidden";
                }
            }, 320);
        }
    }

    window.openLightbox = openLightbox;
    window.closeLightbox = closeLightbox;
    window.navigateLightbox = navigateLightbox;
</script>
