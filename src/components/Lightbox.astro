---
interface Props {
    photos: {
        ID: number;
        Basename: string;
        Year: { Int64: number; Valid: boolean } | null;
        Month: { Int64: number; Valid: boolean } | null;
        Day: { Int64: number; Valid: boolean } | null;
        Sequence: { Int64: number; Valid: boolean } | null;
        SequenceRaw: { String: string; Valid: boolean } | null;
        Rotation: { Int64: number; Valid: boolean } | null;
        Width: number;
        Height: number;
        AvailableSizes: string;
    }[];
    baseURL: string;
}

const { photos, baseURL } = Astro.props;

// Helper function to format date from photo data
function formatPhotoDate(photo: any): string {
    const year = photo.Year?.Valid ? photo.Year.Int64 : null;
    const month = photo.Month?.Valid ? photo.Month.Int64 : null;
    const day = photo.Day?.Valid ? photo.Day.Int64 : null;

    if (!year) return "Date unknown";

    if (year && month && day) {
        const date = new Date(year, month - 1, day);
        return date.toLocaleDateString("en-US", {
            year: "numeric",
            month: "long",
            day: "numeric",
        });
    } else if (year && month) {
        const date = new Date(year, month - 1);
        return date.toLocaleDateString("en-US", {
            year: "numeric",
            month: "long",
        });
    } else {
        return year.toString();
    }
}

// Helper function to build srcset with available sizes
function buildSrcset(
    basename: string,
    extension: string,
    availableSizes: string[],
): string {
    return availableSizes
        .map((size) => `${baseURL}${basename}_${size}.${extension} ${size}`)
        .join(", ");
}
---

<!-- Lightbox overlay (initially hidden) -->
<div
    id="lightbox"
    class="fixed inset-0 z-50 hidden items-center justify-center"
    onclick="closeLightbox(event)"
>
    <!-- Background dimmer -->
    <div class="absolute inset-0 bg-black opacity-90"></div>

    <!-- Close button -->
    <button
        id="lightbox-close"
        class="absolute top-4 right-4 z-70 text-white text-4xl font-light hover:text-gray-300 transition-colors z-60"
        onclick="closeLightbox()"
        aria-label="Close lightbox"
    >
        ×
    </button>

    <!-- Navigation buttons -->
    <button
        id="lightbox-prev"
        class="absolute left-4 top-1/2 transform -translate-y-1/2 text-white text-4xl font-light hover:text-gray-300 transition-colors z-60"
        onclick="navigateLightbox(-1)"
        aria-label="Previous image"
    >
        ‹
    </button>

    <button
        id="lightbox-next"
        class="absolute right-4 top-1/2 transform -translate-y-1/2 text-white text-4xl font-light hover:text-gray-300 transition-colors z-60"
        onclick="navigateLightbox(1)"
        aria-label="Next image"
    >
        ›
    </button>

    <!-- Image container -->
    <div class="relative z-60 flex items-center justify-center w-full h-full">
        <picture id="lightbox-picture" class="block max-w-full max-h-full">
            <!-- Sources populated dynamically -->
        </picture>

        <!-- Overlay caption bar -->
        <div
            class="absolute bottom-0 w-full bg-gradient-to-t from-zinc-400 to-transparent px-4 py-3"
        >
            <p id="lightbox-date" class="text-white text-sm font-medium"></p>
        </div>
    </div>
</div>

<script define:vars={{ photos, baseURL, formatPhotoDate, buildSrcset }}>
    let currentPhotoIndex = 0;
    let lightboxPhotos = photos;

    // Store photos data globally for the lightbox
    window.lightboxData = {
        photos: lightboxPhotos,
        baseURL: baseURL,
        currentIndex: 0,
    };

    function openLightbox(index) {
        currentPhotoIndex = index;
        window.lightboxData.currentIndex = index;

        // Set the date immediately before showing lightbox
        updateLightboxDate();

        updateLightboxImage();
        document.getElementById("lightbox").classList.remove("hidden");
        document.getElementById("lightbox").classList.add("flex");
        document.body.style.overflow = "hidden";

        // Add keyboard event listener
        document.addEventListener("keydown", handleKeydown);
    }

    function closeLightbox(event) {
        // Only close if clicking the overlay itself, not the image or other content
        if (
            event &&
            event.target !== event.currentTarget &&
            event.target.id !== "lightbox-close"
        ) {
            return;
        }

        document.getElementById("lightbox").classList.add("hidden");
        document.getElementById("lightbox").classList.remove("flex");
        document.body.style.overflow = "";

        // Remove keyboard event listener
        document.removeEventListener("keydown", handleKeydown);
    }

    function navigateLightbox(direction) {
        currentPhotoIndex += direction;

        if (currentPhotoIndex < 0) {
            currentPhotoIndex = lightboxPhotos.length - 1;
        } else if (currentPhotoIndex >= lightboxPhotos.length) {
            currentPhotoIndex = 0;
        }

        window.lightboxData.currentIndex = currentPhotoIndex;
        updateLightboxDate();
        updateLightboxImage();
    }

    function updateLightboxDate() {
        const photo = lightboxPhotos[currentPhotoIndex];
        const dateEl = document.getElementById("lightbox-date");

        // Format date
        const year = photo.Year?.Valid ? photo.Year.Int64 : null;
        const month = photo.Month?.Valid ? photo.Month.Int64 : null;
        const day = photo.Day?.Valid ? photo.Day.Int64 : null;

        let dateString = "Date unknown";
        if (year && month && day) {
            const date = new Date(year, month - 1, day);
            dateString = date.toLocaleDateString("en-US", {
                year: "numeric",
                month: "long",
                day: "numeric",
            });
        } else if (year && month) {
            const date = new Date(year, month - 1);
            dateString = date.toLocaleDateString("en-US", {
                year: "numeric",
                month: "long",
            });
        } else if (year) {
            dateString = year.toString();
        }

        dateEl.textContent = dateString;
    }

    function updateLightboxImage() {
        const photo = lightboxPhotos[currentPhotoIndex];
        const picture = document.getElementById("lightbox-picture");

        // Parse available sizes
        let availableSizes;
        try {
            availableSizes = JSON.parse(
                photo.AvailableSizes || '["480w","960w","1600w","2560w"]',
            );
        } catch (e) {
            availableSizes = ["480w", "960w", "1600w", "2560w"];
        }

        // Build srcsets
        const webpSrcset = availableSizes
            .map((size) => `${baseURL}${photo.Basename}_${size}.webp ${size}`)
            .join(", ");
        const jpgSrcset = availableSizes
            .map((size) => `${baseURL}${photo.Basename}_${size}.jpg ${size}`)
            .join(", ");

        // Update picture element
        picture.innerHTML = `
  <source
    type="image/webp"
    srcset="${webpSrcset}"
    sizes="100vw"
  />
  <source
    type="image/jpeg"
    srcset="${jpgSrcset}"
    sizes="100vw"
  />
  <img
  src="${baseURL}${photo.Basename}_lqip.jpg"
  alt="Photo ${photo.Basename}"
  loading="eager"
  decoding="async"
  fetchpriority="high"
  width="${photo.Width}"
  height="${photo.Height}"
  class="w-auto h-auto max-w-full max-h-screen object-contain transition duration-500 ease-out opacity-0"
  style="filter: blur(20px);"
  onload="this.style.filter='blur(0)'; this.style.opacity='1';"
/>

`;
    }

    function handleKeydown(event) {
        switch (event.key) {
            case "Escape":
                closeLightbox();
                break;
            case "ArrowLeft":
                navigateLightbox(-1);
                break;
            case "ArrowRight":
                navigateLightbox(1);
                break;
        }
    }

    // Make functions globally available
    window.openLightbox = openLightbox;
    window.closeLightbox = closeLightbox;
    window.navigateLightbox = navigateLightbox;
</script>
