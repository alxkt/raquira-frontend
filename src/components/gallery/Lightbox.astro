---
import type { Photo } from "../../lib/photos";
interface LBProps {
    photos: Photo[];
    baseURL?: string;
}
const { photos, baseURL: passedBase } = Astro.props as LBProps;
const baseURL = passedBase || import.meta.env.PUBLIC_IMAGE_BASE_URL;
function serverFormatDate(p: Photo): string {
    const anyP: any = p;
    const y = anyP.Year?.Valid ? anyP.Year.Int64 : (anyP.YearValue ?? null);
    const m = anyP.Month?.Valid ? anyP.Month.Int64 : (anyP.MonthValue ?? null);
    const d = anyP.Day?.Valid ? anyP.Day.Int64 : (anyP.DayValue ?? null);
    if (!y) return "Date unknown";
    if (y && m && d)
        return new Date(y, m - 1, d).toLocaleDateString("en-US", {
            year: "numeric",
            month: "long",
            day: "numeric",
        });
    if (y && m)
        return new Date(y, m - 1).toLocaleDateString("en-US", {
            year: "numeric",
            month: "long",
        });
    return String(y);
}
const photoDates = photos.map(serverFormatDate);
---

<div
    id="lightbox"
    class="fixed inset-0 z-50 hidden"
    onclick="window.closeLightbox(event)"
>
    <div class="absolute inset-0 bg-black/90"></div>
    <button
        aria-label="Close"
        onclick="window.closeLightbox()"
        class="absolute top-4 z-80 right-4 text-white text-3xl font-light hover:text-zinc-300"
        >×</button
    >
    <button
        aria-label="Previous"
        onclick="window.navigateLightbox(-1)"
        class="absolute left-4 z-80 top-1/2 -translate-y-1/2 text-white text-4xl font-light hover:text-zinc-300 select-none"
        >‹</button
    >
    <button
        aria-label="Next"
        onclick="window.navigateLightbox(1)"
        class="absolute right-4 z-80 top-1/2 -translate-y-1/2 text-white text-4xl font-light hover:text-zinc-300 select-none"
        >›</button
    >
    <div
        class="relative z-10 flex items-center justify-center w-full h-full p-4 select-none"
    >
        <div
            id="lb-stage"
            class="relative w-full h-full flex items-center justify-center"
        >
            <img
                id="lb-instant"
                class="absolute inset-0 w-full h-full object-contain select-none"
                alt=""
                decoding="async"
                draggable="false"
            />
            <picture
                id="lb-upgrade"
                class="absolute inset-0 w-full h-full opacity-0 transition-opacity duration-300"
            >
                <source id="lb-upgrade-webp" type="image/webp" />
                <source id="lb-upgrade-jpg" type="image/jpeg" />
                <img
                    id="lb-upgrade-img"
                    class="w-full h-full object-contain select-none"
                    alt=""
                    decoding="async"
                    draggable="false"
                />
            </picture>
        </div>
        <div
            class="absolute bottom-4 right-4 bg-black/60 rounded-md px-3 py-2 pointer-events-none"
        >
            <span id="lightbox-date" class="text-white text-sm font-medium"
            ></span>
        </div>
    </div>
</div>
<script define:vars={{ photos, baseURL, photoDates }}>
    let currentIndex = 0;
    const photoList = photos;
    let upgradeToken = 0;
    let originalBodyOverflow = "";
    let originalBodyPaddingRight = "";
    const preloadCache = new Set();
    let hideInstantTimeoutId = null;
    function parseSizes(raw) {
        try {
            const arr = JSON.parse(raw || "[]");
            return Array.isArray(arr) && arr.length
                ? arr
                : ["480w", "960w", "1600w", "2560w"];
        } catch {
            return ["480w", "960w", "1600w", "2560w"];
        }
    }
    function selectBestSize(sizes) {
        if (!sizes || !sizes.length) return "960w";
        const nums = sizes
            .map((s) => parseInt(s.replace(/[^0-9]/g, ""), 10))
            .filter((n) => !isNaN(n));
        if (!nums.length) return sizes[0];
        const target =
            Math.max(window.innerWidth, window.innerHeight) *
            (window.devicePixelRatio || 1);
        let picked = nums[0];
        for (const n of nums) {
            if (n >= target) {
                picked = n;
                break;
            }
            picked = n;
        }
        return (
            sizes.find((s) => s.startsWith(String(picked))) ||
            sizes[sizes.length - 1]
        );
    }
    function lockScroll() {
        const body = document.body;
        originalBodyOverflow = body.style.overflow;
        originalBodyPaddingRight = body.style.paddingRight;
        const scrollBarWidth =
            window.innerWidth - document.documentElement.clientWidth;
        if (scrollBarWidth > 0) body.style.paddingRight = scrollBarWidth + "px";
        body.style.overflow = "hidden";
    }
    function unlockScroll() {
        const body = document.body;
        body.style.overflow = originalBodyOverflow;
        body.style.paddingRight = originalBodyPaddingRight;
    }
    function openLightbox(index) {
        currentIndex = index;
        updateDate();
        const lightbox = document.getElementById("lightbox");
        if (lightbox) {
            lightbox.classList.remove("hidden");
            lightbox.classList.add("flex");
        }
        lockScroll();
        document.addEventListener("keydown", handleKeydown);
        showInstantImage();
        scheduleUpgrade();
    }
    function closeLightbox(event) {
        if (
            event &&
            event.target !== event.currentTarget &&
            event.target instanceof HTMLElement
        ) {
            if (
                event.target.id !== "lb-img" &&
                event.target.getAttribute("aria-label") !== "Close"
            ) {
                return;
            }
        }
        const lightbox = document.getElementById("lightbox");
        if (lightbox) {
            lightbox.classList.add("hidden");
            lightbox.classList.remove("flex");
        }
        unlockScroll();
        document.removeEventListener("keydown", handleKeydown);
    }
    function navigateLightbox(direction) {
        currentIndex += direction;
        if (currentIndex < 0) currentIndex = photoList.length - 1;
        else if (currentIndex >= photoList.length) currentIndex = 0;
        updateDate();
        cancelUpgrade();
        showInstantImage();
        scheduleUpgrade();
    }
    function handleKeydown(e) {
        if (e.key === "Escape") closeLightbox();
        if (e.key === "ArrowLeft") navigateLightbox(-1);
        if (e.key === "ArrowRight") navigateLightbox(1);
    }
    function updateDate() {
        const dateEl = document.getElementById("lightbox-date");
        if (dateEl) dateEl.textContent = photoDates[currentIndex] || "";
    }
    function showInstantImage() {
        const photo = photoList[currentIndex];
        const instant = document.getElementById("lb-instant");
        const upgradePicture = document.getElementById("lb-upgrade");
        if (!(instant && upgradePicture)) return;
        const galleryImg = document.getElementById(
            `gallery-img-${currentIndex}`,
        );
        let gallerySrc = null;
        if (galleryImg instanceof HTMLImageElement) {
            gallerySrc = galleryImg.currentSrc || galleryImg.src || null;
        }
        const fallback = `${baseURL}${photo.Basename}_lqip.jpg`;
        if (!instant.dataset.errorHandlerAttached) {
            instant.addEventListener(
                "error",
                () => {
                    const base = `${baseURL}${photo.Basename}`;
                    const lqip = `${base}_lqip.jpg`;
                    if (instant.src !== lqip) {
                        instant.src = lqip;
                        return;
                    }
                    try {
                        const sizes = JSON.parse(photo.AvailableSizes || "[]");
                        if (Array.isArray(sizes) && sizes.length) {
                            const smallest = sizes[0];
                            const candidate = `${base}_${smallest}.jpg`;
                            if (instant.src !== candidate)
                                instant.src = candidate;
                        }
                    } catch {}
                },
                { passive: true },
            );
            instant.dataset.errorHandlerAttached = "true";
        }
        instant.src = gallerySrc || fallback;
        instant.alt = `Photo ${photo.Basename}`;
        instant.removeAttribute("width");
        instant.removeAttribute("height");
        instant.style.visibility = "visible";
        instant.dataset.state = gallerySrc ? "instant-sharp" : "instant-blur";
        instant.dataset.photoId = String(photo.ID);
        if (hideInstantTimeoutId) {
            clearTimeout(hideInstantTimeoutId);
            hideInstantTimeoutId = null;
        }
        upgradePicture.classList.add("opacity-0");
        const upImg = document.getElementById("lb-upgrade-img");
        if (upImg) {
            upImg.style.display = "none";
            upImg.removeAttribute("src");
            upImg.alt = "";
        }
        const upW = document.getElementById("lb-upgrade-webp");
        const upJ = document.getElementById("lb-upgrade-jpg");
        if (upW) upW.removeAttribute("srcset");
        if (upJ) upJ.removeAttribute("srcset");
    }
    function scheduleUpgrade() {
        const localToken = ++upgradeToken;
        requestAnimationFrame(() => {
            requestAnimationFrame(() => {
                if (localToken !== upgradeToken) return;
                startHighResUpgrade(localToken);
            });
        });
    }
    function cancelUpgrade() {
        upgradeToken++;
    }
    function startHighResUpgrade(token) {
        const photo = photoList[currentIndex];
        if (!photo) return;
        const sizes = parseSizes(photo.AvailableSizes);
        const pickedLabel = selectBestSize(sizes);
        const instant = document.getElementById("lb-instant");
        let instantSizeMatch = null;
        if (instant && instant.currentSrc) {
            const m = instant.currentSrc.match(/_(\d+)w\.(webp|jpg|jpeg)/);
            if (m) instantSizeMatch = parseInt(m[1], 10);
        }
        const pickedNumeric =
            parseInt(pickedLabel.replace(/[^0-9]/g, ""), 10) || 0;
        const instantIsPicked =
            instant &&
            instant.currentSrc &&
            instant.currentSrc.includes("_" + pickedLabel + ".");
        if (instantIsPicked) {
            applyUpgrade(photo, sizes, undefined, instant.currentSrc);
            return;
        }
        if (instantSizeMatch && instantSizeMatch > pickedNumeric) {
            applyUpgrade(photo, sizes, undefined, instant.currentSrc);
            return;
        }
        const webpCandidate = `${baseURL}${photo.Basename}_${pickedLabel}.webp`;
        const jpgCandidate = `${baseURL}${photo.Basename}_${pickedLabel}.jpg`;
        const preloader = new Image();
        preloader.onload = () => {
            if (token !== upgradeToken) return;
            applyUpgrade(
                photo,
                sizes,
                preloader.src.endsWith(".webp") ? preloader.src : undefined,
                preloader.src.endsWith(".webp") ? undefined : preloader.src,
            );
        };
        preloader.onerror = () => {
            const jpgLoader = new Image();
            jpgLoader.onload = () => {
                if (token !== upgradeToken) return;
                applyUpgrade(photo, sizes, undefined, jpgLoader.src);
            };
            jpgLoader.src = jpgCandidate;
        };
        preloader.src = webpCandidate;
    }
    function applyUpgrade(photo, sizes, loadedWebp, loadedJpg) {
        const upgradePicture = document.getElementById("lb-upgrade");
        const upWebp = document.getElementById("lb-upgrade-webp");
        const upJpg = document.getElementById("lb-upgrade-jpg");
        const upImg = document.getElementById("lb-upgrade-img");
        if (!(upgradePicture && upWebp && upJpg && upImg)) return;
        const webpSrcset = sizes
            .map((s) => `${baseURL}${photo.Basename}_${s}.webp ${s}`)
            .join(", ");
        const jpgSrcset = sizes
            .map((s) => `${baseURL}${photo.Basename}_${s}.jpg ${s}`)
            .join(", ");
        upWebp.setAttribute("srcset", webpSrcset);
        upWebp.setAttribute("sizes", "100vw");
        upJpg.setAttribute("srcset", jpgSrcset);
        upJpg.setAttribute("sizes", "100vw");
        upImg.alt = `Photo ${photo.Basename}`;
        upImg.removeAttribute("width");
        upImg.removeAttribute("height");
        upImg.src =
            loadedWebp ||
            loadedJpg ||
            `${baseURL}${photo.Basename}_${sizes[sizes.length - 1]}.jpg`;
        upImg.style.display = "block";
        void upgradePicture.offsetWidth;
        upgradePicture.classList.remove("opacity-0");
        upgradePicture.classList.add("opacity-100");
        const instant = document.getElementById("lb-instant");
        if (instant) {
            const localToken = upgradeToken;
            const currentPhotoId = String(photo.ID);
            hideInstantTimeoutId = setTimeout(() => {
                if (
                    upgradeToken === localToken &&
                    instant.dataset.photoId === currentPhotoId &&
                    upgradePicture.classList.contains("opacity-100")
                ) {
                    instant.style.visibility = "hidden";
                }
                hideInstantTimeoutId = null;
            }, 320);
        }
        preloadNeighbors(currentIndex);
    }
    function neighborIndex(index, delta) {
        const len = photoList.length;
        return (index + delta + len) % len;
    }
    function preloadPhoto(idx) {
        const p = photoList[idx];
        if (!p) return;
        const sizes = parseSizes(p.AvailableSizes);
        const label = selectBestSize(sizes);
        const cacheKey = p.ID + ":" + label;
        if (preloadCache.has(cacheKey)) return;
        preloadCache.add(cacheKey);
        const probe = new Image();
        probe.decoding = "async";
        probe.loading = "eager";
        probe.src = `${baseURL}${p.Basename}_${label}.webp`;
        probe.onerror = () => {
            probe.src = `${baseURL}${p.Basename}_${label}.jpg`;
        };
    }
    function preloadNeighbors(center) {
        preloadPhoto(neighborIndex(center, 1));
        preloadPhoto(neighborIndex(center, -1));
    }
    window.openLightbox = openLightbox;
    window.closeLightbox = closeLightbox;
    window.navigateLightbox = navigateLightbox;
</script>
