---
import type { Photo } from "../../lib/photos";
import { parseSizes, buildSrcset } from "../../lib/photos";

interface Props {
    photos: Photo[];
    baseURL: string;
}
const { photos, baseURL } = Astro.props;
---

<div class="w-full">
    <div class="columns-1 sm:columns-2 md:columns-3 lg:columns-4 gap-4">
        {
            photos.map((photo, index) => {
                let sizes: string[] = parseSizes(photo.AvailableSizes);
                return (
                    <picture class="break-inside-avoid mb-4 block rounded-lg overflow-hidden">
                        <source
                            type="image/webp"
                            srcset={buildSrcset(
                                baseURL,
                                photo.Basename,
                                "webp",
                                sizes,
                            )}
                            sizes="(max-width: 640px) 100vw, (max-width: 768px) 50vw, (max-width: 1024px) 33vw, 25vw"
                        />
                        <source
                            type="image/jpeg"
                            srcset={buildSrcset(
                                baseURL,
                                photo.Basename,
                                "jpg",
                                sizes,
                            )}
                            sizes="(max-width: 640px) 100vw, (max-width: 768px) 50vw, (max-width: 1024px) 33vw, 25vw"
                        />
                        <img
                            id={`gallery-img-${index}`}
                            data-loaded="false"
                            src={`${baseURL}${photo.Basename}_lqip.jpg`}
                            alt={`Photo ${photo.Basename}`}
                            loading="lazy"
                            decoding="async"
                            width={photo.Width}
                            height={photo.Height}
                            class="w-full h-auto object-cover transition duration-300 scale-[1.1] hover:scale-[1.12] hover:brightness-110 cursor-pointer"
                            style="filter: blur(20px); transition: filter 0.3s ease-out;"
                            onload="this.dataset.loaded='true'; this.style.filter='blur(0)';"
                            onclick={`openLightbox(${index})`}
                        />
                    </picture>
                );
            })
        }
    </div>
</div>
