---
interface Photo {
    ID: number;
    Basename: string;
    Year: number;
    Month: number;
    Day: number;
    Sequence: number;
    SequenceRaw: string;
    Rotation: number;
    available_sizes: string[]; // Array of available sizes TODO: Optional change backend schema to actually include this (currently returning all sizes no matter what)
}

const res = await fetch("http://localhost:8080/images/random");
const photos: Photo[] = await res.json();
const baseURL = "https://pub-0654db98da5e47f49578b68f4562e0fa.r2.dev/";

// Helper function to build srcset with only available sizes
function buildSrcset(
    basename: string,
    extension: string,
    availableSizes?: string[],
): string {
    const defaultSizes = ["480w", "960w", "1600w", "2560w"];
    const sizes = availableSizes || defaultSizes;

    return sizes
        .map((size) => `${baseURL}${basename}_${size}.${extension} ${size}`)
        .join(", ");
}
---

<div class="w-full">
    <div class="columns-1 sm:columns-2 md:columns-3 lg:columns-4 gap-4">
        {
            photos.map((photo, index) => {
                // Debug: log the URLs being generated
                const webpUrl = `${baseURL}${photo.Basename}_960w.webp`;
                const jpgUrl = `${baseURL}${photo.Basename}_960w.jpg`;

                if (index === 0) {
                    // Only log for first photo to avoid spam
                    console.log("WebP URL:", webpUrl);
                    console.log("JPG URL:", jpgUrl);
                }

                return (
                    <picture class="break-inside-avoid mb-4 block rounded-lg overflow-hidden">
                        {/* WebP sources */}
                        <source
                            type="image/webp"
                            srcset={buildSrcset(
                                photo.Basename,
                                "webp",
                                photo.available_sizes,
                            )}
                            sizes="(max-width: 640px) 100vw, (max-width: 768px) 50vw, (max-width: 1024px) 33vw, 25vw"
                        />

                        {/* JPEG sources as fallback */}
                        <source
                            type="image/jpeg"
                            srcset={buildSrcset(
                                photo.Basename,
                                "jpg",
                                photo.available_sizes,
                            )}
                            sizes="(max-width: 640px) 100vw, (max-width: 768px) 50vw, (max-width: 1024px) 33vw, 25vw"
                        />

                        {/* Fallback <img> - responsive sizing */}
                        <img
                            src={`${baseURL}${photo.Basename}_lqip.jpg`}
                            alt={`Photo ${photo.Basename}`}
                            loading="lazy"
                            decoding="async"
                            class="w-full h-auto object-cover transition duration-300 scale-[1.1] hover:scale-[1.12] hover:brightness-110 cursor-pointer"
                            style="filter: blur(20px); transition: filter 0.3s ease-out;"
                            onload="this.style.filter='blur(0)';"
                        />
                    </picture>
                );
            })
        }
    </div>
</div>
